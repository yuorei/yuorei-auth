package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"os"

	gocloak "github.com/Nerzal/gocloak/v13"
	model "github.com/yuorei/yuorei-auth/app/domain/models"
	"github.com/yuorei/yuorei-auth/graph/generated"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.CreateUserPayload, error) {
	client := gocloak.NewClient(os.Getenv("KEYCLOAK_URL"))

	token, err := client.LoginAdmin(ctx, os.Getenv("KEYCLOAK_ADMIN_USERNAME"), os.Getenv("KEYCLOAK_ADMIN_PASSWORD"), "master")
	if err != nil {
		return nil, err
	}

	user := gocloak.User{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Enabled:   gocloak.BoolP(true),
		Username:  &input.Username,
	}

	_, err = client.CreateUser(ctx, token.AccessToken, os.Getenv("KEYCLOAK_REALM"), user)
	if err != nil {
		return nil, err
	}

	return &model.CreateUserPayload{
		FirstName: input.FirstName,
		LastName:  input.LastName,
		Email:     input.Email,
		Username:  input.Username,
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
