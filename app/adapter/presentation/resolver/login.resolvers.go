package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"
	"os"

	gocloak "github.com/Nerzal/gocloak/v13"
	model "github.com/yuorei/yuorei-auth/app/domain/models"
)

// Login is the resolver for the Login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginPayload, error) {
	client := gocloak.NewClient(os.Getenv("KEYCLOAK_URL"))
	fmt.Println(os.Getenv("KEYCLOAK_CLIENTID"), os.Getenv("KEYCLOAK_CLIENT_SECRET"))
	token, err := client.Login(ctx, os.Getenv("KEYCLOAK_CLIENTID"), os.Getenv("KEYCLOAK_CLIENT_SECRET"), os.Getenv("KEYCLOAK_REALM"), input.Username, input.Password)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &model.LoginPayload{
		AccessToken:      token.AccessToken,
		ExpiresIn:        token.ExpiresIn,
		TokenType:        token.TokenType,
		RefreshToken:     token.RefreshToken,
		RefreshExpiresIn: token.RefreshExpiresIn,
		NotBeforePolicy:  token.NotBeforePolicy,
		SessionState:     token.SessionState,
		Scope:            token.Scope,
	}, nil
}
